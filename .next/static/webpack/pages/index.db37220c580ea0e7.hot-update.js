"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./utils/getSuggestionsByDay.ts":
/*!**************************************!*\
  !*** ./utils/getSuggestionsByDay.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSuggestionsByDay: () => (/* binding */ getSuggestionsByDay)\n/* harmony export */ });\n/* harmony import */ var _activityScoring__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./activityScoring */ \"(pages-dir-browser)/./utils/activityScoring.ts\");\n/* harmony import */ var _heroSelector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./heroSelector */ \"(pages-dir-browser)/./utils/heroSelector.ts\");\n//----------------------------------------------\n//  src/utils/getSuggestionsByDay.ts\n//----------------------------------------------\n\n\n// ─── Main function ───────────────────────────\nfunction getSuggestionsByDay(param) {\n    let { forecast = [], interests = [], activities = [], now = new Date() } = param;\n    if (!Array.isArray(activities) || !Array.isArray(forecast)) return [];\n    const daysOfWeek = [\n        'Sunday',\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday'\n    ];\n    const todayName = daysOfWeek[now.getDay()];\n    const currentHour = now.getHours();\n    const isTodayEvening = currentHour >= 18;\n    // Build context tags for \"today\" only\n    const todayTimeTag = isTodayEvening ? 'evening' : currentHour >= 12 ? 'afternoon' : 'morning';\n    const todayContextTags = [\n        todayName,\n        todayTimeTag,\n        'relaxation',\n        'family',\n        'cultural',\n        'leisure',\n        'home',\n        'social'\n    ];\n    return forecast.map((day, idx)=>{\n        const month = new Date(day.date).getMonth() + 1; // JS months are 0-based\n        // Only include activities in season\n        const inSeasonActivities = activities.filter((activity)=>{\n            if (!activity.seasonalMonths || activity.seasonalMonths.length === 0) return true;\n            return activity.seasonalMonths.includes(month);\n        });\n        // Determine if this is today\n        const isToday = new Date(day.date).toDateString() === now.toDateString();\n        const isEvening = isToday && now.getHours() >= 18;\n        // Determine if weather is \"good\" for any outdoor activity\n        const outdoorScores = activities.filter((a)=>a.weatherSensitive).map((a)=>(0,_activityScoring__WEBPACK_IMPORTED_MODULE_0__.calculateActivityScore)(a, day.weather, false, false));\n        const isWeatherGood = outdoorScores.some((score)=>score >= 60);\n        // Score all activities (in season only)\n        const suggestions = inSeasonActivities.map((activity)=>({\n                activityId: activity.id,\n                score: (0,_activityScoring__WEBPACK_IMPORTED_MODULE_0__.calculateActivityScore)(activity, day.weather, isWeatherGood, isEvening),\n                evaluation: activity.weatherSensitive ? (0,_activityScoring__WEBPACK_IMPORTED_MODULE_0__.calculateActivityScore)(activity, day.weather, isWeatherGood, isEvening) >= 80 ? 'perfect' : (0,_activityScoring__WEBPACK_IMPORTED_MODULE_0__.calculateActivityScore)(activity, day.weather, isWeatherGood, isEvening) >= 60 ? 'good' : (0,_activityScoring__WEBPACK_IMPORTED_MODULE_0__.calculateActivityScore)(activity, day.weather, isWeatherGood, isEvening) >= 30 ? 'acceptable' : 'acceptable' : activity.indoorAlternative ? 'indoorAlternative' : 'indoor',\n                weatherSensitive: activity.weatherSensitive\n            }));\n        // 1. Perfect outdoor activities\n        const perfectOutdoor = suggestions.filter((s)=>s.weatherSensitive && s.evaluation === 'perfect').sort((a, b)=>b.score - a.score);\n        if (perfectOutdoor.length >= 10) {\n            const top10 = perfectOutdoor.slice(0, 10);\n            return {\n                date: day.date,\n                suggestions: top10.map((param)=>{\n                    let { weatherSensitive, ...rest } = param;\n                    return rest;\n                }),\n                heroActivity: (0,_heroSelector__WEBPACK_IMPORTED_MODULE_1__.selectHeroActivity)(top10, isEvening)\n            };\n        }\n        // 2. Good outdoor activities\n        const goodOutdoor = suggestions.filter((s)=>s.weatherSensitive && s.evaluation === 'good').sort((a, b)=>b.score - a.score);\n        // 3. Acceptable outdoor activities\n        const acceptableOutdoor = suggestions.filter((s)=>s.weatherSensitive && s.evaluation === 'acceptable').sort((a, b)=>b.score - a.score);\n        // 4. Indoor activities\n        const indoor = suggestions.filter((s)=>!s.weatherSensitive).sort((a, b)=>b.score - a.score);\n        // Fill up to 10 in order: perfect, good, acceptable, indoor\n        const combined = [];\n        combined.push(...perfectOutdoor);\n        if (combined.length < 10) {\n            combined.push(...goodOutdoor.slice(0, 10 - combined.length));\n        }\n        if (combined.length < 10) {\n            combined.push(...acceptableOutdoor.slice(0, 10 - combined.length));\n        }\n        if (combined.length < 10) {\n            combined.push(...indoor.slice(0, 10 - combined.length));\n        }\n        const top10 = combined.slice(0, 10);\n        return {\n            date: day.date,\n            suggestions: top10.map((param)=>{\n                let { weatherSensitive, ...rest } = param;\n                return rest;\n            }),\n            heroActivity: (0,_heroSelector__WEBPACK_IMPORTED_MODULE_1__.selectHeroActivity)(top10, isEvening)\n        };\n    }); // <-- This closes the forecast.map\n} // <-- This closes the getSuggestionsByDay function\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./utils/getSuggestionsByDay.ts\n"));

/***/ })

});